#include<stdio.h>
#include<stdlib.h>
#define MAX 20
 
int input[MAX][MAX],final[MAX][MAX],n;
int prim_algo();
int main()
{
	int i,j,total_cost;
	printf("Enter no. of vertices:\n");
	scanf("%d",&n);
	printf("Enter the adjacency matrix of the initial nodes:\n");
	for(i=0;i<n;i++)
		for(j=0;j<n;j++)
			scanf("%d",&input[i][j]);
	total_cost=prim_algo();
	printf("\nspanning tree matrix:\n");	
	for(i=0;i<n;i++)
	{
		printf("\n");
		for(j=0;j<n;j++)
			if(final[i][j]!=0)
				printf("%d---%d,distance=%d",i,j,final[i][j]);
	}
	
	printf("\n\nsum of edges of the graph=%d",sum_edges);
	return 0;
} 
int prim_algo()
{
	int cost[MAX][MAX];
	int u,v,min_distance,distance[MAX],from[MAX];
	int visited[MAX],no_of_edges,i,sum_edges,j;
	for(i=0;i<n;i++)
		for(j=0;j<n;j++)
		{
			if(input[i][j]==0)
				cost[i][j]=999999;
			else
				cost[i][j]=input[i][j];
				final[i][j]=0;
		}
	distance[0]=0;
	visited[0]=1;
	for(i=1;i<n;i++)
	{
		distance[i]=cost[0][i];
		from[i]=0;
		visited[i]=0;
	}
	sum_edges=0;		
	no_of_edges=n-1;	
	while(no_of_edges>0)
	{
		min_distance=999999;
		for(i=1;i<n;i++)
			if(visited[i]==0&&distance[i]<min_distance)
			{
				v=i;
				min_distance=distance[i];
			}
		u=from[v];	
		final[u][v]=distance[v];
		final[v][u]=distance[v];
		no_of_edges--;
		visited[v]=1;
		for(i=1;i<n;i++)
			if(visited[i]==0&&cost[i][v]<distance[i])
			{
				distance[i]=cost[i][v];
				from[i]=v;
			}
		sum_edges=sum_edges+cost[u][v];
	}	
	return(sum_edges);
}